set runtimepath+=/usr/local/share/nvim
set nocompatible
filetype plugin on
filetype indent on
syntax on
set number
set relativenumber
set mouse=a
set nobackup
set nowb
set noswapfile
set nofoldenable
set showtabline=2
set cursorline
autocmd WinEnter * setlocal cursorline
autocmd WinLeave * setlocal nocursorline
set clipboard=unnamedplus
set ignorecase
set smartcase
set incsearch
set hlsearch
nnoremap <silent> <Space> :nohlsearch<Bar>:echo<CR>
set wildmenu
nnoremap d "_d
vnoremap d "_d
nnoremap D "_D
vnoremap D "_D
xnoremap <expr> p 'pgv"'.v:register.'y'
map <C-Left> <C-w>h
map <C-Down> <C-w>j
map <C-Up> <C-w>k
map <C-Right> <C-w>l
map <S-Right> :tabn<CR>
map <S-Left>  :tabp<CR>
set backspace=indent,eol,start
set noexpandtab
set copyindent
set preserveindent
set softtabstop=0
set shiftwidth=4
set tabstop=4
set belloff=all
set updatetime=100
set colorcolumn=80
set laststatus=2
set hidden
set autoread
au FocusGained * :checktime
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

call plug#begin('/usr/share/nvim/runtime/plugged')
Plug 'itchyny/lightline.vim'
Plug 'majutsushi/tagbar'
Plug 'tpope/vim-fugitive'
Plug 'ntpeters/vim-better-whitespace'
Plug 'airblade/vim-gitgutter'
Plug 'scrooloose/nerdcommenter'
Plug 'dyng/ctrlsf.vim'
Plug 'easymotion/vim-easymotion'
Plug 'scrooloose/nerdtree'
Plug 'scrooloose/syntastic'
Plug 'kshenoy/vim-signature'
Plug 'joshdick/onedark.vim'
Plug 'neoclide/coc.nvim', {'tag': '*', 'do': './install.sh'}
Plug 'farmergreg/vim-lastplace'
Plug 'rhysd/vim-clang-format'
Plug 'machakann/vim-highlightedyank'
Plug 'tpope/vim-surround'
Plug 'junegunn/fzf.vim'
Plug 'terryma/vim-expand-region'
Plug 'wellle/visual-split.vim'
Plug 'conradirwin/vim-bracketed-paste'
Plug 't9md/vim-textmanip'
Plug 'junegunn/goyo.vim'
Plug 'jeffkreeftmeijer/vim-numbertoggle'
Plug 'dhruvasagar/vim-table-mode'
Plug 'lervag/vimtex'
Plug 'rhysd/git-messenger.vim'
call plug#end()

nmap <F6> :TagbarToggle<CR>
let g:onedark_hide_endofbuffer = 1
colorscheme onedark
set signcolumn=yes
nmap     <C-F>f <Plug>CtrlSFPrompt
vmap     <C-F>f <Plug>CtrlSFVwordPath
vmap     <C-F>F <Plug>CtrlSFVwordExec
nmap     <C-F>n <Plug>CtrlSFCwordPath
nmap     <C-F>p <Plug>CtrlSFPwordPath
nnoremap <C-F>o :CtrlSFOpen<CR>
nnoremap <C-F>t :CtrlSFToggle<CR>
inoremap <C-F>t <Esc>:CtrlSFToggle<CR>
nmap     <C-F>l <Plug>CtrlSFQuickfixPrompt
vmap     <C-F>l <Plug>CtrlSFQuickfixVwordPath
vmap     <C-F>L <Plug>CtrlSFQuickfixVwordExec
let g:ctrlsf_auto_close = 0
let g:ctrlsf_case_sensitive = 'smart'
let g:ctrlsf_context = '-B 0 -A 0'
let g:ctrlsf_default_root = 'cwd'
let g:ctrlsf_position = 'bottom'
let g:ctrlsf_winsize = '20%'
let g:NERDTreeMapMenu='M'
nnoremap ,c :call NERDComment(0,"toggle")<CR>
vnoremap ,c :call NERDComment(0,"toggle")<CR>
let g:EasyMotion_off_screen_search = 0
let g:EasyMotion_verbose = 0
map <F5> :NERDTreeToggle<CR>
nnoremap <silent><F3> :NERDTreeFind<CR>
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_check_on_open = 1
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 0
function! ToggleSyntastic()
    for i in range(1, winnr('$'))
        let bnum = winbufnr(i)
        if getbufvar(bnum, '&buftype') == 'quickfix'
            lclose
            return
        endif
    endfor
    SyntasticCheck
endfunction
nnoremap <F7> :call ToggleSyntastic()<CR>

let g:coc_user_config = {
    \"coc.preferences.extensionUpdateCheck": "never",
    \'languageserver': {
    \    'ccls': {
    \        "command": "/usr/bin/ccls",
    \        "filetypes": ["c", "cpp", "objc", "objcpp"],
    \        "rootPatterns": [
    \            ".ccls",
    \            "compile_commands.json",
    \            ".vim/",
    \            ".git/",
    \            ".hg/"
    \        ],
    \        "initializationOptions": {
    \            "cache": {
    \                "directory": ".ccls-cache"
    \            }
    \        }
    \    }
    \}
\}
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gr <Plug>(coc-references)
nmap <silent> gh :call CocActionAsync('doHover')<cr>
nmap <silent> gc :call CocLocations('ccls','$ccls/call')<cr>
nmap <silent> gC :call CocLocations('ccls','$ccls/call',{'callee':v:true})<cr>
set updatetime=400
au CursorHold * sil call CocActionAsync('highlight')
au CursorHoldI * sil call CocActionAsync('showSignatureHelp')
let g:clang_format#command = 'clang-format'
let g:clang_format#code_style = "LLVM"
let g:clang_format#style_options = {
        \"Language" : "Cpp",
        \"TabWidth" : 4,
        \"UseTab" : "Always",
        \"ColumnLimit" : 80,
        \"AllowShortIfStatementsOnASingleLine" : "false",
        \"BreakBeforeBraces" : "Linux",
        \"AllowShortFunctionsOnASingleLine" : "Empty",
        \"BinPackParameters" : "false",
        \"BinPackArguments" : "false",
        \"AllowAllParametersOfDeclarationOnNextLine" : "true",
        \"AlignTrailingComments" : "true",
        \"IndentCaseLabels" : "true",
        \"SpaceAfterCStyleCast" : "true",
        \"SortIncludes" : "false"
\}
autocmd FileType c nnoremap <silent><F8> :ClangFormat<CR>
nmap <Leader>f :GFiles<CR>
nmap <Leader>F :Files<CR>
nmap <Leader>b :Buffers<CR>
nmap <Leader>t :BTags<CR>
nmap <Leader>T :Tags<CR>
nmap <Leader>l :BLines<CR>
nmap <Leader>L :Lines<CR>
nmap <Leader>' :Marks<CR>
nmap <Leader>a :Ag<Space>
nmap <Leader>H :Helptags!<CR>
nmap <Leader>C :Commits<CR>
nmap <Leader>c :BCommits<CR>
nmap <Leader>M :Maps<CR>
xmap <C-s> <Plug>(Visual-Split-VSSplitAbove)
xmap <C-S-Down> <Plug>(textmanip-move-down)
xmap <C-S-Up> <Plug>(textmanip-move-up)
xmap <C-S-Left> <Plug>(textmanip-move-left)
xmap <C-S-Right> <Plug>(textmanip-move-right)
nmap <F8> :Goyo<CR>
